#include "application.h"
#include "assets/lang_config.h"
#include "button.h"
#include "codecs/no_audio_codec.h"
#include "config.h"
#include "display/oled_display.h"
#include "dual_network_board.h"
#include "esp32_camera.h"
#include "lamp_controller.h"
#include "led/single_led.h"
#include "mcp_server.h"
#include "nmea_parser.h"
#include "system_reset.h"
#include "wifi_board.h"
#include <driver/i2c_master.h>
#include <esp_lcd_panel_ops.h>
#include <esp_lcd_panel_vendor.h>
#include <esp_log.h>
#include <esp_spiffs.h>

#include "esp_http_client.h"
#include "esp_log.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
// #include <wifi_station.h>
#include "telegram_manager.h" // Add this include

#include "RecurringSchedule.h"
#include "StorageManager.h"
#include "I2CCommandBridge.h"
#include "VehicleController.h"
#include "DistanceSensor.h"

#define TAG "esp32-s3-cam-gps-a7680c"

class Esp32S3CamGpsA7680cBoard : public DualNetworkBoard {
private:
  i2c_master_bus_handle_t display_i2c_bus_;
  esp_lcd_panel_io_handle_t panel_io_ = nullptr;
  esp_lcd_panel_handle_t panel_ = nullptr;
  Display *display_ = nullptr;
  Button capture_button_;
  Button mode_button_;
  Button send_button_;

  Esp32Camera *camera_;
  
  // Vehicle control system
  DistanceSensor *distance_sensor_;
  VehicleController *vehicle_controller_;

  // RecurringSchedule *scheduler_;

  void MountStorage() {
    // Mount partition "storage" ri√™ng cho l∆∞u tr·ªØ d·ªØ li·ªáu ng∆∞·ªùi d√πng
    esp_vfs_spiffs_conf_t storage_conf = {
        .base_path = "/storage",
        .partition_label = "storage",
        .max_files = 5,
        .format_if_mount_failed = true, // C√≥ th·ªÉ format n·∫øu c·∫ßn
    };
    esp_err_t ret = esp_vfs_spiffs_register(&storage_conf);
    if (ret != ESP_OK) {
      ESP_LOGE(TAG, "Failed to mount storage partition (%s)",
               esp_err_to_name(ret));
    } else {
      ESP_LOGI(TAG, "Storage partition mounted at /storage");
    }
  }

  void InitializeDisplayI2c() {
    i2c_master_bus_config_t bus_config = {
        .i2c_port = (i2c_port_t)0,
        .sda_io_num = DISPLAY_SDA_PIN,
        .scl_io_num = DISPLAY_SCL_PIN,
        .clk_source = I2C_CLK_SRC_DEFAULT,
        .glitch_ignore_cnt = 7,
        .intr_priority = 0,
        .trans_queue_depth = 0,
        .flags =
            {
                .enable_internal_pullup = 1,
            },
    };
    ESP_ERROR_CHECK(i2c_new_master_bus(&bus_config, &display_i2c_bus_));
  }

  void InitializeCamera() {
    camera_config_t config = {};
    config.pin_d0 = CAMERA_PIN_D0;
    config.pin_d1 = CAMERA_PIN_D1;
    config.pin_d2 = CAMERA_PIN_D2;
    config.pin_d3 = CAMERA_PIN_D3;
    config.pin_d4 = CAMERA_PIN_D4;
    config.pin_d5 = CAMERA_PIN_D5;
    config.pin_d6 = CAMERA_PIN_D6;
    config.pin_d7 = CAMERA_PIN_D7;
    config.pin_xclk = CAMERA_PIN_XCLK;
    config.pin_pclk = CAMERA_PIN_PCLK;
    config.pin_vsync = CAMERA_PIN_VSYNC;
    config.pin_href = CAMERA_PIN_HREF;
    config.pin_sccb_sda = CAMERA_PIN_SIOD;
    config.pin_sccb_scl = CAMERA_PIN_SIOC;
    config.sccb_i2c_port = 0;
    config.pin_pwdn = CAMERA_PIN_PWDN;
    config.pin_reset = CAMERA_PIN_RESET;
    config.xclk_freq_hz = XCLK_FREQ_HZ;
    config.pixel_format = PIXFORMAT_RGB565;
    config.frame_size = FRAMESIZE_QVGA;
    config.jpeg_quality = 12;
    config.fb_count = 1;
    config.fb_location = CAMERA_FB_IN_PSRAM;
    config.grab_mode = CAMERA_GRAB_WHEN_EMPTY;
    camera_ = new Esp32Camera(config);
    camera_->SetHMirror(false);
    camera_->SetVFlip(true);
  }

  void InitializeSsd1306Display() {
    // SSD1306 config
    esp_lcd_panel_io_i2c_config_t io_config = {
        .dev_addr = 0x3C,
        .on_color_trans_done = nullptr,
        .user_ctx = nullptr,
        .control_phase_bytes = 1,
        .dc_bit_offset = 6,
        .lcd_cmd_bits = 8,
        .lcd_param_bits = 8,
        .flags =
            {
                .dc_low_on_data = 0,
                .disable_control_phase = 0,
            },
        .scl_speed_hz = 400 * 1000,
    };

    ESP_ERROR_CHECK(
        esp_lcd_new_panel_io_i2c_v2(display_i2c_bus_, &io_config, &panel_io_));

    ESP_LOGI(TAG, "Install SSD1306 driver");
    esp_lcd_panel_dev_config_t panel_config = {};
    panel_config.reset_gpio_num = -1;
    panel_config.bits_per_pixel = 1;

    esp_lcd_panel_ssd1306_config_t ssd1306_config = {
        .height = static_cast<uint8_t>(DISPLAY_HEIGHT),
    };
    panel_config.vendor_config = &ssd1306_config;

    ESP_ERROR_CHECK(
        esp_lcd_new_panel_ssd1306(panel_io_, &panel_config, &panel_));
    ESP_LOGI(TAG, "SSD1306 driver installed");

    // Reset the display
    ESP_ERROR_CHECK(esp_lcd_panel_reset(panel_));
    if (esp_lcd_panel_init(panel_) != ESP_OK) {
      ESP_LOGE(TAG, "Failed to initialize display");
      display_ = new NoDisplay();
      return;
    }

    // Set the display to on
    ESP_LOGI(TAG, "Turning display on");
    ESP_ERROR_CHECK(esp_lcd_panel_disp_on_off(panel_, true));

    display_ = new OledDisplay(panel_io_, panel_, DISPLAY_WIDTH, DISPLAY_HEIGHT,
                               DISPLAY_MIRROR_X, DISPLAY_MIRROR_Y);
  }

  void fetch_reverse_geocode(double lat, double lon) {
    char url[256];
    snprintf(
        url, sizeof(url),
        "https://nominatim.openstreetmap.org/reverse?format=json&lat=%f&lon=%f",
        lat, lon);

    esp_http_client_config_t config = {};
    config.url = url;
    config.cert_pem = NULL;
    config.method = HTTP_METHOD_GET;
    config.disable_auto_redirect = false;
    config.user_agent = "ESP32GeoApp/1.0 (contact: your_email@example.com)";

    esp_http_client_handle_t client = esp_http_client_init(&config);
    if (client == NULL) {
      ESP_LOGE(TAG, "Failed to init http client");
      return;
    }

    esp_err_t err = esp_http_client_perform(client);
    if (err == ESP_OK) {
      int status = esp_http_client_get_status_code(client);
      int content_length = esp_http_client_get_content_length(client);
      ESP_LOGI(TAG, "HTTP GET Status = %d, content_length = %d", status,
               content_length);

      char buffer[1024];
      int read_len =
          esp_http_client_read_response(client, buffer, sizeof(buffer) - 1);
      if (read_len >= 0) {
        buffer[read_len] = 0; // null terminate
        ESP_LOGI(TAG, "Response: %s", buffer);

        // parse JSON (v√≠ d·ª• l·∫•y ƒë·ªãa ch·ªâ display_name)
        cJSON *root = cJSON_Parse(buffer);
        if (root) {
          cJSON *display = cJSON_GetObjectItem(root, "display_name");
          if (cJSON_IsString(display)) {
            ESP_LOGI(TAG, "Location: %s", display->valuestring);
          }
          cJSON_Delete(root);
        }
      } else {
        ESP_LOGE(TAG, "Failed to read response");
      }
    } else {
      ESP_LOGE(TAG, "HTTP GET request failed: %s", esp_err_to_name(err));
    }

    esp_http_client_cleanup(client);
  }

  void InitializeButtons() {
    capture_button_.OnClick([this]() {
      ESP_LOGI(TAG,
               "Capture button clicked - Switching network type (4G <-> WiFi)");
      auto &app = Application::GetInstance();
      // Chuy·ªÉn ƒë·ªïi gi·ªØa 4G v√† WiFi
      app.Schedule([this]() {
        SwitchNetworkType();
        ESP_LOGI(TAG, "Network type switched successfully");
      });
    });

    mode_button_.OnClick([this]() {
      ESP_LOGI(TAG, "Mode button clicked - toggle chat state");
      auto &app = Application::GetInstance();
      app.Schedule([this]() {
        auto &app = Application::GetInstance();
        app.SendTextCommandToServer("h·ªßy b·ªè l·ªãch 1");
        auto scheduler_ = &RecurringSchedule::GetInstance();
        scheduler_->removeSchedule(1);
      });
    });

    send_button_.OnClick([this]() {
      ESP_LOGI(TAG, "Send button clicked - toggle chat state");

      auto &app = Application::GetInstance();
      app.Schedule([this]() {
        auto &app = Application::GetInstance();
        app.ToggleChatState();
      });

      // toggle chat state
    });
  }

  void InitializeTools() {
    static LampController lamp(SOS_LED_PIN);
    auto &mcp = McpServer::GetInstance();
    auto &app = Application::GetInstance();
    auto &telegram = TelegramManager::GetInstance();
    auto &storage = StorageManager::GetInstance();
    auto &scheduler = RecurringSchedule::GetInstance();
    
    // Kh·ªüi t·∫°o I2C Command Bridge v·ªõi bus ƒë√£ c√≥ s·∫µn (shared v·ªõi display)
    static I2CCommandBridge i2cBridge;
    if (!i2cBridge.InitWithExistingBus(display_i2c_bus_)) {
      ESP_LOGW(TAG, "‚ö†Ô∏è  I2C Command Bridge init failed, continuing without actuator control");
    }
    
    // L∆∞u pointer ƒë·ªÉ tr√°nh warning khi capture static variable trong lambda
    I2CCommandBridge* i2cBridgePtr = &i2cBridge;

    // Kh·ªüi t·∫°o Distance Sensor (c·∫£m bi·∫øn kho·∫£ng c√°ch)
    distance_sensor_ = new DistanceSensor(distance_uart_port, distance_uart_rx_pin, distance_uart_tx_pin);
    if (distance_sensor_->Init(distance_uart_baudrate)) {
      distance_sensor_->SetObstacleThreshold(30.0f); // 30cm threshold
      distance_sensor_->SetVibrateOnClose(is_enable_distance); // K√≠ch ho·∫°t rung theo bi·∫øn to√†n c·ª•c
      distance_sensor_->SetVibrateCallback([](int times) {
        // Callback ƒë·ªÉ rung khi c√≥ v·∫≠t c·∫£n g·∫ßn
        vibrate(times);
      });
      distance_sensor_->StartReading();
      ESP_LOGI(TAG, "‚úÖ Distance sensor initialized");
    } else {
      ESP_LOGW(TAG, "‚ö†Ô∏è  Distance sensor init failed");
      delete distance_sensor_;
      distance_sensor_ = nullptr;
    }

    // Kh·ªüi t·∫°o Vehicle Controller (ƒëi·ªÅu khi·ªÉn xe th√¥ng minh)
    vehicle_controller_ = new VehicleController(&i2cBridge, distance_sensor_);
    vehicle_controller_->SetStatusCallback([&app](const std::string& status) {
      ESP_LOGI(TAG, "üöó Vehicle status: %s", status.c_str());
      // C√≥ th·ªÉ g·ª≠i tr·∫°ng th√°i v·ªÅ cho user qua app
    });
    ESP_LOGI(TAG, "‚úÖ Vehicle controller initialized");

    // ==================== VEHICLE CONTROL - DIRECT COMMANDS ====================
    // Thay v√¨ d√πng MCP tools, b√¢y gi·ªù d√πng l·ªánh text t·ª± nhi√™n qua AI

    mcp.AddTool(
        "vehicle.execute_command",
        "ƒêI·ªÄU KHI·ªÇN XE b·∫±ng l·ªánh t·ª± nhi√™n.\n"
        "H·ªó tr·ª£ chu·ªói l·ªánh ph·ª©c t·∫°p nh∆∞: 'ƒëi t·ªõi 1m r·∫Ω ph·∫£i ƒëi th·∫≥ng 500mm sang tr√°i'\n"
        "T√≠nh nƒÉng:\n"
        "- Di chuy·ªÉn theo kho·∫£ng c√°ch ch√≠nh x√°c (mm, cm, m)\n"
        "- Chu·ªói h√†nh ƒë·ªông li√™n ti·∫øp\n"
        "- T·ª± ƒë·ªông tr√°nh v·∫≠t c·∫£n\n"
        "- M·∫∑c ƒë·ªãnh di chuy·ªÉn 0.5m n·∫øu kh√¥ng ch·ªâ ƒë·ªãnh kho·∫£ng c√°ch\n"
        "V√≠ d·ª•:\n"
        "- 'ƒëi t·ªõi' ‚Üí di chuy·ªÉn 0.5m v·ªÅ ph√≠a tr∆∞·ªõc\n"
        "- 'ƒëi t·ªõi 2m' ‚Üí di chuy·ªÉn 2m v·ªÅ ph√≠a tr∆∞·ªõc\n"
        "- 'r·∫Ω tr√°i sang ph·∫£i 30cm' ‚Üí r·∫Ω tr√°i r·ªìi di chuy·ªÉn sang ph·∫£i 30cm\n"
        "- 'l√πi 1m r·∫Ω ph·∫£i ƒëi th·∫≥ng cho ƒë·∫øn khi g·∫∑p ng∆∞·ªùi' ‚Üí chu·ªói l·ªánh ph·ª©c t·∫°p\n"
        "Tham s·ªë:\n"
        "- command (string): L·ªánh ƒëi·ªÅu khi·ªÉn b·∫±ng ti·∫øng Vi·ªát t·ª± nhi√™n",
        PropertyList({Property("command", kPropertyTypeString)}),
        [this](const PropertyList &props) -> ReturnValue {
          if (!vehicle_controller_) {
            return "L·ªói: H·ªá th·ªëng ƒëi·ªÅu khi·ªÉn xe ch∆∞a s·∫µn s√†ng";
          }
          
          std::string command = props["command"].value<std::string>();
          ESP_LOGI(TAG, "üöó Executing vehicle command: %s", command.c_str());
          
          auto commands = vehicle_controller_->ParseNaturalCommand(command);
          if (commands.empty()) {
            return "Kh√¥ng hi·ªÉu l·ªánh ƒëi·ªÅu khi·ªÉn. Vui l√≤ng th·ª≠ l·∫°i v·ªõi l·ªánh r√µ r√†ng h∆°n.";
          }
          
          bool success = vehicle_controller_->ExecuteSequence(commands);
          return success ? "Th·ª±c hi·ªán l·ªánh th√†nh c√¥ng" : "L·ªói khi th·ª±c hi·ªán l·ªánh";
        });

    mcp.AddTool(
        "vehicle.stop",
        "D·ª™NG XE kh·∫©n c·∫•p.\n"
        "D·ª´ng t·∫•t c·∫£ ho·∫°t ƒë·ªông di chuy·ªÉn ngay l·∫≠p t·ª©c.\n"
        "D√πng khi c·∫ßn d·ª´ng kh·∫©n c·∫•p ho·∫∑c h·ªßy b·ªè l·ªánh ƒëang th·ª±c hi·ªán.",
        PropertyList(),
        [this](const PropertyList &) -> ReturnValue {
          if (!vehicle_controller_) {
            return "L·ªói: H·ªá th·ªëng ƒëi·ªÅu khi·ªÉn xe ch∆∞a s·∫µn s√†ng";
          }
          
          ESP_LOGI(TAG, "üõë Emergency stop requested");
          bool success = vehicle_controller_->Stop();
          return success ? "ƒê√£ d·ª´ng xe" : "L·ªói khi d·ª´ng xe";
        });

    mcp.AddTool(
        "vehicle.status",
        "KI·ªÇM TRA TR·∫†NG TH√ÅI xe v√† c√°c th√†nh ph·∫ßn.\n"
        "Tr·∫£ v·ªÅ th√¥ng tin v·ªÅ pin, ƒë·ªông c∆°, c·∫£m bi·∫øn, v√† tr·∫°ng th√°i hi·ªán t·∫°i.",
        PropertyList(),
        [this](const PropertyList &) -> ReturnValue {
          if (!vehicle_controller_) {
            return "L·ªói: H·ªá th·ªëng ƒëi·ªÅu khi·ªÉn xe ch∆∞a s·∫µn s√†ng";
          }
          
          std::string status = vehicle_controller_->GetVehicleStatus();
          
          // Th√™m th√¥ng tin c·∫£m bi·∫øn kho·∫£ng c√°ch
          if (distance_sensor_) {
            float distance = distance_sensor_->GetCurrentDistance();
            bool has_obstacle = distance_sensor_->HasObstacle();
            
            // Parse JSON v√† th√™m th√¥ng tin c·∫£m bi·∫øn
            cJSON* json = cJSON_Parse(status.c_str());
            if (json) {
              cJSON_AddNumberToObject(json, "distance_cm", distance);
              cJSON_AddBoolToObject(json, "obstacle_detected", has_obstacle);
              
              char* updated_status = cJSON_Print(json);
              status = std::string(updated_status);
              cJSON_free(updated_status);
              cJSON_Delete(json);
            }
          }
          
          return status;
        });

    // ==================== STORAGE & SCHEDULE INITIALIZATION ====================
    
    // Kh·ªüi t·∫°o RecurringSchedule v·ªõi file path gi·ªëng StorageManager
    scheduler.begin("/storage/schedule.json");
    scheduler.setCallback([&app](int id, const std::string &note) {
      ESP_LOGI(TAG, "‚è∞ Schedule triggered: id=%d, note=%s", id, note.c_str());
      app.SendTextCommandToServer(note);
    });

    // Kh·ªüi t·∫°o StorageManager v·ªõi 4 √¥ (0-3)
    // ‚ö†Ô∏è QUAN TR·ªåNG: addSlot TR∆Ø·ªöC, begin() SAU ƒë·ªÉ load d·ªØ li·ªáu v√†o slots
    // GPIO_NUM_1 d√πng t·∫°m cho test, ch∆∞a g·∫Øn LED th·∫≠t
    storage.addSlot(0, GPIO_NUM_NC); // √î 0
    storage.addSlot(1, GPIO_NUM_NC); // √î 1
    storage.addSlot(2, GPIO_NUM_NC); // √î 2
    storage.addSlot(3, GPIO_NUM_NC); // √î 3

    // begin() s·∫Ω auto-load d·ªØ li·ªáu t·ª´ file v√†o c√°c slot ƒë√£ add
    if (!storage.begin("/storage/storage.json")) {
      ESP_LOGW(TAG, "Failed to initialize storage, but continuing...");
    }

    // ==================== STORAGE MANAGER MCP TOOLS ====================
    mcp.AddTool(
        "storage.put_item",
        "L∆ØU/ƒê·∫∂T ƒë·ªì v√†o m·ªôt √¥ c·ª• th·ªÉ trong t·ªß.\n"
        "D√πng khi: Ng∆∞·ªùi d√πng n√≥i 't√¥i ƒë·ªÉ [ƒë·ªì v·∫≠t] v√†o √¥ s·ªë [X]', 'c·∫•t [ƒë·ªì] "
        "v√†o ngƒÉn [X]'.\n"
        "‚ö†Ô∏è QUAN TR·ªåNG: Ng∆∞·ªùi d√πng ƒë·∫øm t·ª´ 1-4, H·ªÜ TH·ªêNG ƒë·∫øm t·ª´ 0-3.\n"
        "Tham s·ªë:\n"
        "- slot (integer): S·ªë √¥ THEO NG∆Ø·ªúI D√ôNG (1-4), h·ªá th·ªëng s·∫Ω t·ª± convert "
        "th√†nh 0-3\n"
        "- item (string): T√™n ƒë·ªì v·∫≠t (v√≠ d·ª•: 'k√≠nh', 'ch√¨a kh√≥a', 'v√≠')\n"
        "V√≠ d·ª•: Ng∆∞·ªùi d√πng: 'T√¥i ƒë·ªÉ k√≠nh v√†o √¥ s·ªë 1' ‚Üí slot=1 ‚Üí h·ªá th·ªëng l∆∞u "
        "v√†o index 0\n"
        "V√≠ d·ª•: Ng∆∞·ªùi d√πng: 'C·∫•t v√≠ v√†o ngƒÉn 4' ‚Üí slot=4 ‚Üí h·ªá th·ªëng l∆∞u v√†o "
        "index 3\n"
        "Tr·∫£ v·ªÅ: true n·∫øu th√†nh c√¥ng, false n·∫øu √¥ kh√¥ng t·ªìn t·∫°i",
        PropertyList({Property("slot", kPropertyTypeInteger, 1, 4),
                      Property("item", kPropertyTypeString)}),
        [&storage](const PropertyList &props) -> ReturnValue {
          int userSlot = props["slot"].value<int>();
          int internalSlot = userSlot - 1; // Convert 1-6 to 0-5
          std::string item = props["item"].value<std::string>();
          ESP_LOGI(TAG, "üì¶ Putting '%s' into slot %d (user: %d)", item.c_str(),
                   internalSlot, userSlot);
          return storage.putItem(internalSlot, item, true);
        });

    mcp.AddTool(
        "storage.take_item",
        "L·∫§Y ƒë·ªì ra kh·ªèi m·ªôt √¥ (ƒë√°nh d·∫•u √¥ tr·ªëng).\n"
        "D√πng khi: Ng∆∞·ªùi d√πng n√≥i 't√¥i l·∫•y ƒë·ªì ·ªü √¥ [X] ra', 'l·∫•y [ƒë·ªì] ra'.\n"
        "‚ö†Ô∏è QUAN TR·ªåNG: Ng∆∞·ªùi d√πng ƒë·∫øm t·ª´ 1-4, H·ªÜ TH·ªêNG ƒë·∫øm t·ª´ 0-3.\n"
        "Tham s·ªë:\n"
        "- slot (integer): S·ªë √¥ THEO NG∆Ø·ªúI D√ôNG (1-4), h·ªá th·ªëng s·∫Ω t·ª± convert "
        "th√†nh 0-3\n"
        "Tr·∫£ v·ªÅ: true n·∫øu th√†nh c√¥ng, false n·∫øu √¥ kh√¥ng t·ªìn t·∫°i",
        PropertyList({Property("slot", kPropertyTypeInteger, 1, 4)}),
        [&storage](const PropertyList &props) -> ReturnValue {
          int userSlot = props["slot"].value<int>();
          int internalSlot = userSlot - 1; // Convert 1-6 to 0-5
          ESP_LOGI(TAG, "üì§ Taking item from slot %d (user: %d)", internalSlot,
                   userSlot);
          return storage.takeItem(internalSlot, true);
        });

    mcp.AddTool(
        "storage.find_item",
        "T√åM KI·∫æM ƒë·ªì v·∫≠t trong t·ªß, tr·∫£ v·ªÅ danh s√°ch c√°c √¥ ch·ª©a ƒë·ªì ƒë√≥.\n"
        "D√πng khi: Ng∆∞·ªùi d√πng h·ªèi '[ƒë·ªì v·∫≠t] c·ªßa t√¥i ·ªü ƒë√¢u?', 't√¨m [ƒë·ªì]'.\n"
        "‚ö†Ô∏è QUAN TR·ªåNG: Tr·∫£ v·ªÅ s·ªë √¥ THEO NG∆Ø·ªúI D√ôNG (1-4), ƒë√£ convert t·ª´ h·ªá "
        "th·ªëng (0-3).\n"
        "Tham s·ªë:\n"
        "- item (string): T√™n ƒë·ªì v·∫≠t c·∫ßn t√¨m\n"
        "V√≠ d·ª•: 'K√≠nh c·ªßa t√¥i ·ªü ƒë√¢u?' ‚Üí item='k√≠nh'\n"
        "Tr·∫£ v·ªÅ: Danh s√°ch s·ªë √¥ ch·ª©a ƒë·ªì ƒë√≥ (JSON array). N·∫øu kh√¥ng t√¨m th·∫•y "
        "‚Üí []",
        PropertyList({Property("item", kPropertyTypeString)}),
        [&storage](const PropertyList &props) -> ReturnValue {
          std::string item = props["item"].value<std::string>();
          ESP_LOGI(TAG, "üîç Finding item: %s", item.c_str());
          auto slots = storage.findItemByName(item);

          // T·∫°o JSON response v·ªõi slot theo s·ªë ng∆∞·ªùi d√πng (1-6)
          cJSON *root = cJSON_CreateObject();
          cJSON_AddStringToObject(root, "item", item.c_str());
          cJSON *slotsArray = cJSON_CreateArray();
          for (int internalSlot : slots) {
            int userSlot = internalSlot + 1; // Convert 0-5 to 1-6
            cJSON_AddItemToArray(slotsArray, cJSON_CreateNumber(userSlot));
          }
          cJSON_AddItemToObject(root, "slots", slotsArray);
          cJSON_AddNumberToObject(root, "count", slots.size());

          char *jsonStr = cJSON_Print(root);
          std::string result(jsonStr);
          cJSON_free(jsonStr);
          cJSON_Delete(root);

          return result;
        });

    mcp.AddTool(
        "storage.led",
        "ƒêI·ªÄU KHI·ªÇN ƒê√àN LED c·ªßa m·ªôt √¥.\n"
        "‚ö†Ô∏è QUAN TR·ªåNG: Ng∆∞·ªùi d√πng ƒë·∫øm t·ª´ 1-4, H·ªÜ TH·ªêNG ƒë·∫øm t·ª´ 0-3.\n"
        "Tham s·ªë:\n"
        "- slot (integer): S·ªë √¥ THEO NG∆Ø·ªúI D√ôNG (1-4), h·ªá th·ªëng s·∫Ω t·ª± convert "
        "th√†nh 0-3\n"
        "- action (string): 'on' = b·∫≠t, 'off' = t·∫Øt, 'blink' = nh·∫•p nh√°y\n"
        "- times (integer): S·ªë l·∫ßn nh·∫•p nh√°y (ch·ªâ d√πng khi action='blink', m·∫∑c "
        "ƒë·ªãnh 3)\n"
        "- delay_ms (integer): ƒê·ªô tr·ªÖ ms (ch·ªâ d√πng khi action='blink', m·∫∑c "
        "ƒë·ªãnh 500)\n"
        "Tr·∫£ v·ªÅ: true n·∫øu th√†nh c√¥ng",
        PropertyList({Property("slot", kPropertyTypeInteger, 1, 4),
                      Property("action", kPropertyTypeString),
                      Property("times", kPropertyTypeInteger, 1, 10),
                      Property("delay_ms", kPropertyTypeInteger, 100, 2000)}),
        [&storage](const PropertyList &props) -> ReturnValue {
          int userSlot = props["slot"].value<int>();
          int internalSlot = userSlot - 1; // Convert 1-6 to 0-5
          std::string action = props["action"].value<std::string>();

          if (action == "on") {
            ESP_LOGI(TAG, "üí° Turning ON LED for slot %d (user: %d)",
                     internalSlot, userSlot);
            return storage.turnOnLED(internalSlot);
          } else if (action == "off") {
            ESP_LOGI(TAG, "üåë Turning OFF LED for slot %d (user: %d)",
                     internalSlot, userSlot);
            return storage.turnOffLED(internalSlot);
          } else if (action == "blink") {
            int times = props["times"].value<int>();
            int delayMs = props["delay_ms"].value<int>();
            ESP_LOGI(TAG, "‚ú® Blinking LED for slot %d (user: %d), %d times",
                     internalSlot, userSlot, times);
            return storage.blinkLED(internalSlot, times, delayMs);
          }
          return false;
        });

    mcp.AddTool(
        "storage.door",
        "M·ªû/ƒê√ìNG c·ª≠a t·ªß (g·ª≠i l·ªánh qua I2C sang ESP32 ph·ª•).\n"
        "‚ö†Ô∏è QUAN TR·ªåNG: Ng∆∞·ªùi d√πng ƒë·∫øm t·ª´ 1-4, H·ªÜ TH·ªêNG ƒë·∫øm t·ª´ 0-3.\n"
        "D√πng khi: Ng∆∞·ªùi d√πng n√≥i 'm·ªü t·ªß s·ªë [X]', 'ƒë√≥ng ngƒÉn [X]'.\n"
        "Tham s·ªë:\n"
        "- slot (integer): S·ªë √¥ THEO NG∆Ø·ªúI D√ôNG (1-4), h·ªá th·ªëng s·∫Ω t·ª± convert th√†nh 0-3\n"
        "- action (string): 'open' = m·ªü c·ª≠a, 'close' = ƒë√≥ng c·ª≠a\n"
        "V√≠ d·ª•:\n"
        "- 'M·ªü t·ªß s·ªë 1' ‚Üí slot=1, action='open'\n"
        "- 'ƒê√≥ng ngƒÉn 3' ‚Üí slot=3, action='close'\n"
        "Tr·∫£ v·ªÅ: JSON response t·ª´ ESP32 ph·ª•",
        PropertyList({
            Property("slot", kPropertyTypeInteger, 1, 4),
            Property("action", kPropertyTypeString)
        }),
        [i2cBridgePtr](const PropertyList &props) -> ReturnValue {
          int userSlot = props["slot"].value<int>();
          int internalSlot = userSlot - 1;  // Convert 1-6 to 0-5
          std::string action = props["action"].value<std::string>();
          
          ESP_LOGI(TAG, "üö™ Storage door: slot %d (user: %d), action=%s", 
                   internalSlot, userSlot, action.c_str());
          
          return i2cBridgePtr->SendStorageCommand(internalSlot, action);
        });

    mcp.AddTool(
        "storage.list_all",
        "XEM DANH S√ÅCH t·∫•t c·∫£ c√°c √¥ v√† ƒë·ªì v·∫≠t trong t·ªß.\n"
        "D√πng khi: Ng∆∞·ªùi d√πng h·ªèi 't·ªß c√≥ g√¨?', 'xem t·∫•t c·∫£ ƒë·ªì'.\n"
        "‚ö†Ô∏è QUAN TR·ªåNG: JSON tr·∫£ v·ªÅ ch·ª©a index THEO NG∆Ø·ªúI D√ôNG (1-4).\n"
        "Kh√¥ng c·∫ßn tham s·ªë.\n"
        "Tr·∫£ v·ªÅ: Chu·ªói JSON ch·ª©a th√¥ng tin t·∫•t c·∫£ √¥ (index, status, item, "
        "...)",
        PropertyList(), [&storage](const PropertyList &) -> ReturnValue {
          std::string json = storage.getSlotsJSON();
          ESP_LOGI(TAG, "üìã Listing all storage slots %s", json.c_str());
          return json;
        });

    mcp.AddTool(
        "storage.get_info",
        "L·∫§Y TH√îNG TIN t·ªïng quan v·ªÅ t·ªß (s·ªë √¥ tr·ªëng, s·ªë √¥ c√≥ ƒë·ªì, t·ªïng s·ªë √¥).\n"
        "D√πng khi: C·∫ßn bi·∫øt t√¨nh tr·∫°ng t·ªß.\n"
        "Kh√¥ng c·∫ßn tham s·ªë.\n"
        "Tr·∫£ v·ªÅ: JSON object ch·ª©a total, empty, occupied",
        PropertyList(), [&storage](const PropertyList &) -> ReturnValue {
          cJSON *root = cJSON_CreateObject();
          cJSON_AddNumberToObject(root, "total", storage.getTotalSlotCount());
          cJSON_AddNumberToObject(root, "empty", storage.getEmptySlotCount());
          cJSON_AddNumberToObject(root, "occupied",
                                  storage.getOccupiedSlotCount());

          char *jsonStr = cJSON_Print(root);
          std::string result(jsonStr);
          cJSON_free(jsonStr);
          cJSON_Delete(root);

          ESP_LOGI(TAG, "‚ÑπÔ∏è Storage info: %s", result.c_str());
          return result;
        });

    // ==================== RECURRING SCHEDULE MCP TOOLS ====================

    mcp.AddTool(
        "schedule.add_once_delay",
        "‚è∞ NH·∫ÆC SAU M·ªòT KHO·∫¢NG TH·ªúI GIAN (t√≠nh t·ª´ b√¢y gi·ªù).\n"
        "D√πng khi: User n√≥i 'nh·∫Øc t√¥i SAU 30 gi√¢y', 'ƒë·∫∑t l·ªãch 5 PH√öT N·ªÆA', '10 "
        "gi√¢y sau h√£y...'.\n"
        "‚ùó QUAN TR·ªåNG: Tham s·ªë delay_seconds l√† S·ªê GI√ÇY T∆Ø∆†NG ƒê·ªêI t·ª´ b√¢y gi·ªù, "
        "KH√îNG ph·∫£i timestamp.\n"
        "V√≠ d·ª•:\n"
        "- 'nh·∫Øc sau 30 gi√¢y' ‚Üí delay_seconds=30\n"
        "- 'nh·∫Øc sau 5 ph√∫t' ‚Üí delay_seconds=300 (5*60)\n"
        "- 'nh·∫Øc sau 2 gi·ªù' ‚Üí delay_seconds=7200 (2*60*60)\n"
        "Tham s·ªë:\n"
        "- id (integer): ID duy nh·∫•t cho l·ªãch\n"
        "- delay_seconds (integer): S·ªë gi√¢y delay t·ª´ b√¢y gi·ªù (VD: 30, 300, "
        "7200)\n"
        "- note (string): L·ªánh s·∫Ω th·ª±c thi khi h·∫øt th·ªùi gian\n"
        "Tr·∫£ v·ªÅ: true n·∫øu th√†nh c√¥ng",
        PropertyList({Property("id", kPropertyTypeInteger),
                      Property("delay_seconds", kPropertyTypeInteger, 1,
                               86400), // 1 sec to 24 hours
                      Property("note", kPropertyTypeString)}),
        [&scheduler, &app](const PropertyList &props) -> ReturnValue {
          int id = props["id"].value<int>();
          int delay = props["delay_seconds"].value<int>();
          std::string note = props["note"].value<std::string>();

          ESP_LOGI(TAG,
                   "‚è∞ Adding delayed schedule: id=%d, delay=%d sec, note=%s",
                   id, delay, note.c_str());

          app.Schedule([&scheduler, id, delay, note]() {
            scheduler.addOnceAfterDelay(id, delay, note, true);
          });

          return true;
        });

    mcp.AddTool(
        "schedule.add_once",
        "L·ªäCH CH·∫†Y 1 L·∫¶N duy nh·∫•t v√†o gi·ªù c·ª• th·ªÉ trong ng√†y h√¥m nay.\n"
        "D√πng khi: User mu·ªën nh·∫Øc 1 l·∫ßn (v√≠ d·ª•: 'nh·∫Øc h·ªçp l√∫c 3h chi·ªÅu', 'b·∫≠t "
        "ƒë√®n 8h t·ªëi').\n"
        "Tham s·ªë:\n"
        "- id (integer): ID duy nh·∫•t cho l·ªãch\n"
        "- hour (integer): Gi·ªù (0-23)\n"
        "- minute (integer): Ph√∫t (0-59)\n"
        "- note (string): L·ªánh s·∫Ω th·ª±c thi khi ƒë·∫øn gi·ªù\n"
        "Tr·∫£ v·ªÅ: true n·∫øu th√†nh c√¥ng",
        PropertyList({Property("id", kPropertyTypeInteger),
                      Property("hour", kPropertyTypeInteger, 0, 23),
                      Property("minute", kPropertyTypeInteger, 0, 59),
                      Property("note", kPropertyTypeString)}),
        [&scheduler, &app](const PropertyList &props) -> ReturnValue {
          int id = props["id"].value<int>();
          int hour = props["hour"].value<int>();
          int minute = props["minute"].value<int>();
          std::string note = props["note"].value<std::string>();

          ESP_LOGI(TAG, "‚è∞ Adding once schedule: id=%d, %02d:%02d, note=%s",
                   id, hour, minute, note.c_str());

          app.Schedule([&scheduler, id, hour, minute, note]() {
            scheduler.addOnceAtTime(id, hour, minute, note, true);
          });

          return true;
        });

    mcp.AddTool(
        "schedule.add_interval",
        "L·ªäCH L·∫∂P L·∫†I theo kho·∫£ng th·ªùi gian ƒë·ªÅu ƒë·∫∑n.\n"
        "D√πng khi: L·∫∑p sau m·ªói X ph√∫t/gi·ªù (v√≠ d·ª•: 'ki·ªÉm tra m·ªói 30 ph√∫t', "
        "'t∆∞·ªõi c√¢y 2 gi·ªù 1 l·∫ßn').\n"
        "Tham s·ªë:\n"
        "- id (integer): ID duy nh·∫•t\n"
        "- interval_seconds (integer): Kho·∫£ng th·ªùi gian (gi√¢y). VD: 30 ph√∫t = "
        "1800, 1 gi·ªù = 3600\n"
        "- note (string): L·ªánh th·ª±c thi m·ªói l·∫ßn\n"
        "Tr·∫£ v·ªÅ: true n·∫øu th√†nh c√¥ng",
        PropertyList({Property("id", kPropertyTypeInteger),
                      Property("interval_seconds", kPropertyTypeInteger),
                      Property("note", kPropertyTypeString)}),
        [&scheduler, &app](const PropertyList &props) -> ReturnValue {
          int id = props["id"].value<int>();
          int sec = props["interval_seconds"].value<int>();
          std::string note = props["note"].value<std::string>();
          uint32_t interval = static_cast<uint32_t>(sec);

          ESP_LOGI(TAG, "‚è∞ Adding interval schedule: id=%d, every %d seconds",
                   id, sec);

          app.Schedule([&scheduler, id, interval, note]() {
            scheduler.addIntervalSchedule(id, interval, note, true);
          });

          return true;
        });

    mcp.AddTool(
        "schedule.add_daily",
        "L·ªäCH H√ÄNG NG√ÄY v√†o c√πng gi·ªù m·ªói ng√†y.\n"
        "D√πng khi: L·∫∑p c√πng gi·ªù m·ªói ng√†y (v√≠ d·ª•: 'b√°o th·ª©c 6h30 s√°ng', 't·∫Øt "
        "ƒë√®n 10h t·ªëi').\n"
        "Tham s·ªë:\n"
        "- id (integer): ID duy nh·∫•t\n"
        "- hour (integer): Gi·ªù (0-23)\n"
        "- minute (integer): Ph√∫t (0-59)\n"
        "- note (string): L·ªánh th·ª±c thi h√†ng ng√†y\n"
        "Tr·∫£ v·ªÅ: true n·∫øu th√†nh c√¥ng",
        PropertyList({Property("id", kPropertyTypeInteger),
                      Property("hour", kPropertyTypeInteger, 0, 23),
                      Property("minute", kPropertyTypeInteger, 0, 59),
                      Property("note", kPropertyTypeString)}),
        [&scheduler, &app](const PropertyList &props) -> ReturnValue {
          int id = props["id"].value<int>();
          int hour = props["hour"].value<int>();
          int minute = props["minute"].value<int>();
          std::string note = props["note"].value<std::string>();

          std::vector<RecurringSchedule::DailyTime> times;
          times.emplace_back(hour, minute);

          ESP_LOGI(TAG, "‚è∞ Adding daily schedule: id=%d, %02d:%02d daily", id,
                   hour, minute);

          app.Schedule([&scheduler, id, times, note]() {
            scheduler.addDailySchedule(id, times, note, true);
          });

          return true;
        });

    mcp.AddTool(
        "schedule.add_weekly",
        "L·ªäCH H√ÄNG TU·∫¶N v√†o ng√†y v√† gi·ªù c·ªë ƒë·ªãnh.\n"
        "D√πng khi: L·∫∑p v√†o ng√†y c·ª• th·ªÉ trong tu·∫ßn (v√≠ d·ª•: 'h·ªçp m·ªói th·ª© 2 l√∫c "
        "9h').\n"
        "Tham s·ªë:\n"
        "- id (integer): ID duy nh·∫•t\n"
        "- weekday (string): MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, "
        "SATURDAY, SUNDAY\n"
        "- hour (integer): Gi·ªù (0-23)\n"
        "- minute (integer): Ph√∫t (0-59)\n"
        "- note (string): L·ªánh th·ª±c thi h√†ng tu·∫ßn\n"
        "Tr·∫£ v·ªÅ: true n·∫øu th√†nh c√¥ng",
        PropertyList({Property("id", kPropertyTypeInteger),
                      Property("weekday", kPropertyTypeString),
                      Property("hour", kPropertyTypeInteger, 0, 23),
                      Property("minute", kPropertyTypeInteger, 0, 59),
                      Property("note", kPropertyTypeString)}),
        [&scheduler, &app](const PropertyList &props) -> ReturnValue {
          int id = props["id"].value<int>();
          std::string wd = props["weekday"].value<std::string>();
          int hour = props["hour"].value<int>();
          int minute = props["minute"].value<int>();
          std::string note = props["note"].value<std::string>();

          RecurringSchedule::WeekDay day =
              (wd == "MONDAY")      ? RecurringSchedule::MONDAY
              : (wd == "TUESDAY")   ? RecurringSchedule::TUESDAY
              : (wd == "WEDNESDAY") ? RecurringSchedule::WEDNESDAY
              : (wd == "THURSDAY")  ? RecurringSchedule::THURSDAY
              : (wd == "FRIDAY")    ? RecurringSchedule::FRIDAY
              : (wd == "SATURDAY")  ? RecurringSchedule::SATURDAY
                                    : RecurringSchedule::SUNDAY;

          std::vector<RecurringSchedule::WeeklyTime> times;
          times.emplace_back(day, hour, minute);

          ESP_LOGI(TAG, "‚è∞ Adding weekly schedule: id=%d, %s %02d:%02d", id,
                   wd.c_str(), hour, minute);

          app.Schedule([&scheduler, id, times, note]() {
            scheduler.addWeeklySchedule(id, times, note, true);
          });

          return true;
        });

    mcp.AddTool(
        "schedule.remove",
        "X√ìA m·ªôt l·ªãch theo ID.\n"
        "D√πng khi: User mu·ªën h·ªßy l·ªãch.\n"
        "‚ö†Ô∏è L∆ØU √ù: PH·∫¢I g·ªçi 'schedule.list' tr∆∞·ªõc ƒë·ªÉ bi·∫øt ID, v√† X√ÅC NH·∫¨N "
        "v·ªõi user!\n"
        "Tham s·ªë:\n"
        "- id (integer): ID l·ªãch c·∫ßn x√≥a\n"
        "Tr·∫£ v·ªÅ: true n·∫øu th√†nh c√¥ng",
        PropertyList({Property("id", kPropertyTypeInteger)}),
        [&scheduler, &app](const PropertyList &props) -> ReturnValue {
          int id = props["id"].value<int>();

          ESP_LOGI(TAG, "üóëÔ∏è Removing schedule: id=%d", id);

          app.Schedule(
              [&scheduler, id]() { scheduler.removeSchedule(id, true); });

          return true;
        });

    mcp.AddTool(
        "schedule.list",
        "XEM DANH S√ÅCH t·∫•t c·∫£ l·ªãch ƒëang c√≥.\n"
        "D√πng khi: User h·ªèi 'c√≥ l·ªãch n√†o', 'xem l·ªãch', ho·∫∑c tr∆∞·ªõc khi x√≥a.\n"
        "Kh√¥ng c·∫ßn tham s·ªë.\n"
        "Tr·∫£ v·ªÅ: JSON ch·ª©a th√¥ng tin t·∫•t c·∫£ l·ªãch",
        PropertyList(), [&scheduler](const PropertyList &) -> ReturnValue {
          ESP_LOGI(TAG, "üìã Listing all schedules");
          return scheduler.getSchedulesJSON();
        });

    // ==================== END MCP TOOLS ====================

    // Light controls
    mcp.AddTool("light.power",
                "Ki·ªÉm tra tr·∫°ng th√°i ngu·ªìn ƒëi·ªán c·ªßa h·ªá th·ªëng ƒë√®n LED, tr·∫£ v·ªÅ "
                "true n·∫øu ƒë√®n ƒëang ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng",
                PropertyList(),
                [this](const PropertyList &) -> ReturnValue { return true; });

    mcp.AddTool("light.sos",
                "ƒêi·ªÅu khi·ªÉn ch·∫ø ƒë·ªô ƒë√®n SOS kh·∫©n c·∫•p.\n"
                "Tham s·ªë:\n"
                "- action (string): 'on' = b·∫≠t SOS, 'off' = t·∫Øt SOS, 'status' "
                "= ki·ªÉm tra tr·∫°ng th√°i\n"
                "Tr·∫£ v·ªÅ: true/false t√πy action",
                PropertyList({Property("action", kPropertyTypeString)}),
                [this](const PropertyList &props) -> ReturnValue {
                  std::string action = props["action"].value<std::string>();
                  if (action == "on") {
                    is_sos_led_on = true;
                    return true;
                  } else if (action == "off") {
                    is_sos_led_on = false;
                    return false;
                  } else if (action == "status") {
                    return is_sos_led_on;
                  }
                  return false;
                });

    // Distance sensor
    mcp.AddTool("sensor.distance",
                "ƒêi·ªÅu khi·ªÉn c·∫£m bi·∫øn kho·∫£ng c√°ch d√≤ ƒë∆∞·ªùng.\n"
                "Tham s·ªë:\n"
                "- action (string): 'on' = b·∫≠t c·∫£m bi·∫øn rung khi c√≥ v·∫≠t c·∫£n g·∫ßn (<1m), "
                "'off' = t·∫Øt rung, 'status' = ki·ªÉm tra tr·∫°ng th√°i\n"
                "Tr·∫£ v·ªÅ: true/false t√πy action",
                PropertyList({Property("action", kPropertyTypeString)}),
                [this](const PropertyList &props) -> ReturnValue {
                  std::string action = props["action"].value<std::string>();
                  if (action == "on") {
                    is_enable_distance = true;
                    if (distance_sensor_) {
                      distance_sensor_->SetVibrateOnClose(true);
                    }
                    return true;
                  } else if (action == "off") {
                    is_enable_distance = false;
                    if (distance_sensor_) {
                      distance_sensor_->SetVibrateOnClose(false);
                    }
                    return false;
                  } else if (action == "status") {
                    if (distance_sensor_) {
                      float distance = distance_sensor_->GetCurrentDistance();
                      bool has_obstacle = distance_sensor_->HasObstacle();
                      
                      cJSON* json = cJSON_CreateObject();
                      cJSON_AddBoolToObject(json, "enabled", is_enable_distance);
                      cJSON_AddNumberToObject(json, "distance_cm", distance);
                      cJSON_AddBoolToObject(json, "has_obstacle", has_obstacle);
                      
                      char* jsonStr = cJSON_Print(json);
                      std::string result(jsonStr);
                      cJSON_free(jsonStr);
                      cJSON_Delete(json);
                      
                      return result;
                    }
                    return is_enable_distance;
                  }
                  return false;
                });

    // System functions
    // mcp.AddTool(
    //     "system.gps",
    //     "L·∫•y v·ªã tr√≠ GPS hi·ªán t·∫°i c·ªßa thi·∫øt b·ªã v√† t·∫°o link Google Maps ƒë·ªÉ xem "
    //     "v·ªã tr√≠. "
    //     "Tr·∫£ v·ªÅ ƒë∆∞·ªùng link d·∫°ng http://maps.google.com/?q=lat,lon c√≥ th·ªÉ m·ªü "
    //     "tr√™n tr√¨nh duy·ªát. "
    //     "N·∫øu t·ªça ƒë·ªô lat/lon = 0 nghƒ©a l√† ch∆∞a b·∫Øt ƒë∆∞·ª£c t√≠n hi·ªáu GPS, khuy√™n "
    //     "ng∆∞·ªùi d√πng ra khu v·ª±c th√¥ng tho√°ng. "
    //     "D√πng ƒë·ªÉ x√°c ƒë·ªãnh v·ªã tr√≠ hi·ªán t·∫°i, chia s·∫ª ƒë·ªãa ƒëi·ªÉm ho·∫∑c t√¨m ƒë∆∞·ªùng",
    //     PropertyList(), [this](const PropertyList &) -> ReturnValue {
    //       latitude = 10.036935;
    //       longitude = 105.761735;
    //       sprintf(gps_link, "http://maps.google.com/?q=%.05f,%.05f", latitude,
    //               longitude);
    //       return gps_link;
    //     });

    // mcp.AddTool("system.wifi_reset",
    //             "Kh·ªüi ƒë·ªông l·∫°i thi·∫øt b·ªã v√† v√†o ch·∫ø ƒë·ªô c·∫•u h√¨nh WiFi ƒë·ªÉ k·∫øt n·ªëi "
    //             "m·∫°ng m·ªõi. "
    //             "**C·∫¢NH B√ÅO**: H√†nh ƒë·ªông n√†y s·∫Ω ng·∫Øt k·∫øt n·ªëi hi·ªán t·∫°i v√† y√™u "
    //             "c·∫ßu c·∫•u h√¨nh l·∫°i WiFi. "
    //             "Ch·ªâ s·ª≠ d·ª•ng khi c·∫ßn thay ƒë·ªïi m·∫°ng WiFi ho·∫∑c kh·∫Øc ph·ª•c s·ª± c·ªë "
    //             "k·∫øt n·ªëi. C·∫ßn x√°c nh·∫≠n t·ª´ ng∆∞·ªùi d√πng",
    //             PropertyList(), [](const PropertyList &) -> ReturnValue {
    //               ESP_LOGW(TAG, "WiFi reset requested");
    //               // SwitchNetworkType();
    //               return true;
    //             });

    // // Telegram functions
    // mcp.AddTool("msg.check",
    //             "Ki·ªÉm tra v√† ƒë·ªçc tin nh·∫Øn m·ªõi t·ª´ Telegram bot. Tr·∫£ v·ªÅ n·ªôi dung "
    //             "JSON ch·ª©a c√°c tin nh·∫Øn ch∆∞a ƒë·ªçc "
    //             "bao g·ªìm ng∆∞·ªùi g·ª≠i, th·ªùi gian, n·ªôi dung tin nh·∫Øn. N·∫øu c√≥ tin "
    //             "nh·∫Øn m·ªõi s·∫Ω ƒë·ªçc l·∫ßn l∆∞·ª£t t·ª´ng tin. "
    //             "D√πng ƒë·ªÉ nh·∫≠n th√¥ng b√°o, tin nh·∫Øn t·ª´ ng∆∞·ªùi th√¢n ho·∫∑c h·ªá th·ªëng "
    //             "gi√°m s√°t t·ª´ xa",
    //             PropertyList(), [&app](const PropertyList &) -> ReturnValue {
    //               return app.GetTelegramMsgBufferAsJson();
    //             });

    // mcp.AddTool(
    //     "msg.send",
    //     "G·ª≠i tin nh·∫Øn text qua Telegram bot ƒë·∫øn chat/group ƒë√£ c·∫•u h√¨nh. "
    //     "Tham s·ªë msg: n·ªôi dung tin nh·∫Øn c·∫ßn g·ª≠i (h·ªó tr·ª£ ti·∫øng Vi·ªát v√† "
    //     "emoji). "
    //     "D√πng ƒë·ªÉ b√°o c√°o t√¨nh tr·∫°ng, g·ª≠i th√¥ng b√°o kh·∫©n c·∫•p, ho·∫∑c li√™n l·∫°c "
    //     "v·ªõi "
    //     "ng∆∞·ªùi th√¢n. "
    //     "Tin nh·∫Øn s·∫Ω ƒë∆∞·ª£c g·ª≠i ngay l·∫≠p t·ª©c n·∫øu c√≥ k·∫øt n·ªëi internet",
    //     PropertyList({Property("msg", kPropertyTypeString)}),
    //     [&app](const PropertyList &props) -> ReturnValue {
    //       app.SendTelegramMessage(props["msg"].value<std::string>());
    //       return true;
    //     });

    // Camera functions (if available)
    if (camera_) {
      mcp.AddTool(
          "camera.photo",
          "Ch·ª•p ·∫£nh b·∫±ng camera t√≠ch h·ª£p v√† t·ª± ƒë·ªông g·ª≠i qua Telegram bot. "
          "Kh√¥ng c·∫ßn tham s·ªë ƒë·∫ßu v√†o, h·ªá th·ªëng s·∫Ω t·ª± ƒë·ªông ch·ª•p, n√©n v√† g·ª≠i "
          "·∫£nh "
          "v·ªõi ch·∫•t l∆∞·ª£ng t·ªëi ∆∞u. "
          "S·ª≠ d·ª•ng khi ng∆∞·ªùi d√πng y√™u c·∫ßu ch·ª•p ·∫£nh g·ª≠i cho ng∆∞·ªùi th√¢n, ghi "
          "l·∫°i "
          "s·ª± ki·ªán, "
          "ho·∫∑c chia s·∫ª h√¨nh ·∫£nh m√¥i tr∆∞·ªùng xung quanh. C·∫ßn k·∫øt n·ªëi internet "
          "ƒë·ªÉ g·ª≠i ·∫£nh",
          PropertyList(),
          [this, &telegram](const PropertyList &) -> ReturnValue {
            // if (!camera_->Capture())
            //   return false;

            // TelegramPhotoInfo info;
            // auto config = telegram.GetConfig();

            // if (!config.chat_id.empty() && !config.bot_token.empty()) {
            //   info = {config.bot_token, config.chat_id, "", ""};
            // } else {
            //   info = {"7354122596:AAFVA3MTxPZwCwmDPJNBvbchMe3ZlHvyjqU",
            //           "7799806969", "", ""};
            // }

            // return camera_->SendPhotoToTelegram(info);

            auto &app = Application::GetInstance();

            app.Schedule([this]() {
              if (!camera_->Capture()) {
                throw std::runtime_error("Failed to capture photo");
              }

              ESP_LOGI(TAG, "Captured photo, sending to Telegram...");
              // auto question = properties["question"].value<std::string>();
              TelegramPhotoInfo info;

              // Load configuration from TelegramManager if parameters are
              // empty
              auto &telegram_manager = TelegramManager::GetInstance();
              auto config = telegram_manager.GetConfig();

              info.caption = "";
              info.parse_mode = ""; // ho·∫∑c "" n·∫øu kh√¥ng d√πng

              if (!config.chat_id.empty() && !config.bot_token.empty()) {
                ESP_LOGI(TAG, "Loaded bot token from TelegramManager");
                info.bot_token = config.bot_token;
                info.chat_id = config.chat_id;
              } else {
                ESP_LOGW(TAG,
                         "Telegram bot not configured, using default test bot");
                info.bot_token =
                    "7354122596:AAFVA3MTxPZwCwmDPJNBvbchMe3ZlHvyjqU";
                info.chat_id = "7799806969"; // group/supergroup
              }
              return camera_->SendPhotoToTelegram(info);
            });

            return true;
          });

      mcp.AddTool(
          "camera.analyze",
          "Ch·ª•p ·∫£nh v√† ph√¢n t√≠ch n·ªôi dung b·∫±ng AI ƒë·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi v·ªÅ h√¨nh "
          "·∫£nh. "
          "Tham s·ªë question: c√¢u h·ªèi v·ªÅ nh·ªØng g√¨ mu·ªën bi·∫øt trong ·∫£nh (VD: "
          "'c√≥ "
          "g√¨ trong ·∫£nh?', 'ƒë√¢y l√† m·ªánh gi√° ti·ªÅn bao nhi√™u?', 'ƒë·ªçc ch·ªØ trong "
          "·∫£nh'). "
          "AI c√≥ th·ªÉ nh·∫≠n di·ªán v·∫≠t th·ªÉ, ƒë·ªçc vƒÉn b·∫£n, nh·∫≠n di·ªán ti·ªÅn t·ªá, m√¥ "
          "t·∫£ "
          "c·∫£nh v·∫≠t, ƒë·∫øm s·ªë l∆∞·ª£ng ƒë·ªì v·∫≠t. "
          "H·ªØu √≠ch cho ng∆∞·ªùi khi·∫øm th·ªã ƒë·ªÉ 'nh√¨n' v√† hi·ªÉu m√¥i tr∆∞·ªùng xung "
          "quanh",
          PropertyList({Property("question", kPropertyTypeString)}),
          [this](const PropertyList &props) -> ReturnValue {
            if (!camera_->Capture())
              return "L·ªói ch·ª•p ·∫£nh";
            return camera_->Explain(props["question"].value<std::string>());
          });
    }
  }

  static void gps_event_handler(void *event_handler_arg,
                                esp_event_base_t event_base, int32_t event_id,
                                void *event_data) {
    gps_t *gps = NULL;
    switch (event_id) {
    case GPS_UPDATE:
      gps = (gps_t *)event_data;

      latitude = gps->latitude;
      longitude = gps->longitude;

      if (latitude != last_latitude && longitude != last_longitude &&
          latitude > 0 && longitude > 0) {
        last_latitude = latitude;
        last_longitude = longitude;
      } else {
        latitude = last_latitude;
        longitude = last_longitude;
      }
      // 10.036935, 105.761735
      // latitude = 10.036935;
      // longitude = 105.761735;

      sprintf(gps_link, "http://maps.google.com/?q=%.05f,%.05f", latitude,
              longitude);

      if (latitude > 0 && longitude > 0 && !is_speak_gps) {
        // send_json_via_ws(ask_weather, gps_link);
        is_speak_gps = true;
        // start_play_mp3_task(mp3_gps);
      }

      // sprintf(gps_link, "http://maps.google.com/?q=%.05f,%.05f", latitude,
      //         longitude);
      // gps_link
      /* print information parsed from GPS statements */
      // ESP_LOGI(TAG,
      //          "%d/%d/%d %d:%d:%d => \r\n"
      //          "\t\t\t\t\t\tlatitude   = %.05f¬∞N\r\n"
      //          "\t\t\t\t\t\tlongitude = %.05f¬∞E\r\n"
      //          "\t\t\t\t\t\taltitude   = %.02fm\r\n"
      //          "\t\t\t\t\t\tspeed      = %fm/s",
      //          gps->date.year + YEAR_BASE, gps->date.month, gps->date.day,
      //          gps->tim.hour + TIME_ZONE, gps->tim.minute, gps->tim.second,
      //          gps->latitude, gps->longitude, gps->altitude, gps->speed);
      break;
    case GPS_UNKNOWN:
      /* print unknown statements */
      // ESP_LOGW(TAG, "%s", (char *)event_data);
      break;
    default:
      break;
    }
  }

  static void vibrate(int times) {
    for (int i = 0; i < times; i++) {
      gpio_set_level(VABRITE_PIN, 1);
      vTaskDelay(pdMS_TO_TICKS(300));
      gpio_set_level(VABRITE_PIN, 0);
      vTaskDelay(pdMS_TO_TICKS(300));
    }
  }

  void setup_gps() {
    /* NMEA parser configuration */
    nmea_parser_config_t config = NMEA_PARSER_CONFIG_DEFAULT();
    /* init NMEA parser library */
    nmea_parser_handle_t nmea_hdl = nmea_parser_init(&config);
    /* register event handler for NMEA parser library */
    nmea_parser_add_handler(nmea_hdl, gps_event_handler, NULL);
    ESP_LOGI(TAG, "GPS initialized");
  }

  void blink(int times) {
    for (int i = 0; i < times; i++) {
      gpio_set_level(SOS_LED_PIN, 1);
      vTaskDelay(pdMS_TO_TICKS(200));
      gpio_set_level(SOS_LED_PIN, 0);
      vTaskDelay(pdMS_TO_TICKS(200));
    }
  }

  void setup_pins() {
    gpio_reset_pin(SOS_LED_PIN);
    gpio_set_direction(SOS_LED_PIN, GPIO_MODE_OUTPUT);
    blink(3);

    gpio_reset_pin(VABRITE_PIN);
    gpio_set_direction(VABRITE_PIN, GPIO_MODE_OUTPUT);
    vibrate(2);

    // gpio_set_level(VABRITE_PIN, 1);
  }

public:
  Esp32S3CamGpsA7680cBoard()
      : DualNetworkBoard(ML307_TX_PIN, ML307_RX_PIN, GPIO_NUM_NC, 1),
        capture_button_(CAPTURE_BUTTON_GPIO, false, 2000, 50, false),
        mode_button_(MODE_BUTTON_GPIO, false, 2000, 50, false),
        send_button_(SEND_BUTTON_GPIO, false, 2000, 50, false),
        distance_sensor_(nullptr), vehicle_controller_(nullptr) {
    MountStorage();
    InitializeDisplayI2c();
    InitializeSsd1306Display();
    InitializeButtons();
    InitializeTools();
    InitializeCamera();
    setup_gps();
    setup_pins();
  }

  virtual ~Esp32S3CamGpsA7680cBoard() {
    if (vehicle_controller_) {
      delete vehicle_controller_;
      vehicle_controller_ = nullptr;
    }
    if (distance_sensor_) {
      delete distance_sensor_;
      distance_sensor_ = nullptr;
    }
  }

  virtual Led *GetLed() override {
    static SingleLed led(SOS_LED_PIN);
    return &led;
  }

  virtual AudioCodec *GetAudioCodec() override {
    static NoAudioCodecDuplex audio_codec(
        AUDIO_INPUT_SAMPLE_RATE, AUDIO_OUTPUT_SAMPLE_RATE, AUDIO_I2S_GPIO_BCLK,
        AUDIO_I2S_GPIO_WS, AUDIO_I2S_GPIO_DOUT, AUDIO_I2S_GPIO_DIN);
    return &audio_codec;
  }

  virtual Display *GetDisplay() override { return display_; }

  virtual Camera *GetCamera() override { return camera_; }
};

DECLARE_BOARD(Esp32S3CamGpsA7680cBoard);