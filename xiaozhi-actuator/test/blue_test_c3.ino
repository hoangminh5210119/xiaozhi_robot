#include <Arduino.h>
#include <BLEClient.h>
#include <BLEDevice.h>
#include <BLEScan.h>
#include <BLEUtils.h>
#include <HardwareSerial.h>
// =======================================
// BLE UUID
// =======================================
static BLEUUID heartRateServiceUUID((uint16_t)0x180D);
static BLEUUID heartRateMeasurementCharUUID((uint16_t)0x2A37);
static BLEUUID batteryServiceUUID((uint16_t)0x180F);
static BLEUUID batteryLevelCharUUID((uint16_t)0x2A19);

// =======================================
// Bi·∫øn to√†n c·ª•c
// =======================================
static BLEClient *pClient = nullptr;
static BLERemoteCharacteristic *pHeartRateChar = nullptr;
static BLERemoteCharacteristic *pBatteryChar = nullptr;
static bool connected = false;
int heartRateValue = -1;
int batteryLevel = -1;

static String targetAddressStr = "";
static esp_ble_addr_type_t targetAddressType;
static bool foundDevice = false;

// =======================================
// Callback
// =======================================
void heartRateNotifyCallback(BLERemoteCharacteristic *, uint8_t *data,
                             size_t len, bool) {
  if (len < 2)
    return;
  heartRateValue = data[1];
  Serial.printf("‚ù§Ô∏è Heart Rate: %d bpm\n", heartRateValue);
}

class MyClientCallback : public BLEClientCallbacks {
  void onConnect(BLEClient *) override {
    connected = true;
    Serial.println("[BLE] ‚úÖ Connected");
  }
  void onDisconnect(BLEClient *) override {
    connected = false;
    Serial.println("[BLE] ‚ùå Disconnected");
  }
};

// =======================================
// Qu√©t t·∫•t c·∫£ thi·∫øt b·ªã
// =======================================
void scanDevices(uint8_t duration_sec = 5) {
  BLEScan *pScan = BLEDevice::getScan();
  pScan->setActiveScan(true);
  Serial.printf("[SCAN] ƒêang qu√©t thi·∫øt b·ªã BLE (%ds)...\n", duration_sec);

  BLEScanResults results = pScan->start(duration_sec, false);

  if (results.getCount() == 0) {
    Serial.println("[SCAN] ‚ùå Kh√¥ng t√¨m th·∫•y thi·∫øt b·ªã n√†o.");
  } else {
    Serial.printf("[SCAN] ‚úÖ T√¨m th·∫•y %d thi·∫øt b·ªã:\n", results.getCount());
    for (int i = 0; i < results.getCount(); i++) {
      BLEAdvertisedDevice d = results.getDevice(i);
      Serial.printf("  ‚Ä¢ %s | RSSI: %d", d.getAddress().toString().c_str(),
                    d.getRSSI());
      if (d.haveName())
        Serial.printf(" | Name: %s", d.getName().c_str());
      if (d.haveServiceUUID())
        Serial.printf(" | C√≥ UUID d·ªãch v·ª•");
      Serial.println();
    }
  }

  // STOP v√† CLEAR ho√†n to√†n
  pScan->stop();
  pScan->clearResults();
  delay(100);
}

// =======================================
// T√¨m thi·∫øt b·ªã nh·ªãp tim
// =======================================
bool scanHeartRateDevice(uint8_t duration_sec = 10) {
  foundDevice = false;
  BLEScan *pScan = BLEDevice::getScan();
  pScan->setActiveScan(true);

  Serial.printf("[SCAN] T√¨m thi·∫øt b·ªã Heart Rate (%ds)...\n", duration_sec);
  BLEScanResults results = pScan->start(duration_sec, false);

  // ∆Øu ti√™n 1: T√¨m theo Service UUID
  for (int i = 0; i < results.getCount(); i++) {
    BLEAdvertisedDevice d = results.getDevice(i);
    if (d.haveServiceUUID() && d.isAdvertisingService(heartRateServiceUUID)) {
      Serial.printf("[SCAN] ü©∫ T√¨m th·∫•y (Service UUID): %s\n",
                    d.getAddress().toString().c_str());

      targetAddressStr = String(d.getAddress().toString().c_str());
      targetAddressType = d.getAddressType();
      foundDevice = true;

      // STOP scan tr∆∞·ªõc khi return!
      pScan->stop();
      delay(200); // ƒê·ª£i scan stop ho√†n to√†n
      pScan->clearResults();

      return true;
    }
  }

  // ∆Øu ti√™n 2: T√¨m theo t√™n
  for (int i = 0; i < results.getCount(); i++) {
    BLEAdvertisedDevice d = results.getDevice(i);
    if (d.haveName()) {
      String name = String(d.getName().c_str());
      name.toUpperCase();
      if (name.indexOf("HR") >= 0 || name.indexOf("HEART") >= 0) {
        Serial.printf("[SCAN] ü©∫ T√¨m th·∫•y (T√™n): %s - %s\n",
                      d.getName().c_str(), d.getAddress().toString().c_str());

        targetAddressStr = String(d.getAddress().toString().c_str());
        targetAddressType = d.getAddressType();
        foundDevice = true;

        pScan->stop();
        delay(200);
        pScan->clearResults();

        return true;
      }
    }
  }

  pScan->stop();
  pScan->clearResults();
  Serial.println("[SCAN] ‚ùå Kh√¥ng t√¨m th·∫•y thi·∫øt b·ªã nh·ªãp tim.");
  return false;
}

// =======================================
// K·∫øt n·ªëi
// =======================================
bool connectToDevice() {
  if (!foundDevice || targetAddressStr.isEmpty()) {
    Serial.println("[BLE] ‚ùå Kh√¥ng c√≥ ƒë·ªãa ch·ªâ thi·∫øt b·ªã");
    return false;
  }

  Serial.printf("[BLE] ƒêang k·∫øt n·ªëi t·ªõi %s...\n", targetAddressStr.c_str());

  // Cleanup client c≈©
  if (pClient != nullptr) {
    if (pClient->isConnected()) {
      pClient->disconnect();
    }
    delete pClient;
    pClient = nullptr;
    delay(100);
  }

  // T·∫°o BLEAddress t·ª´ string
  BLEAddress addr(targetAddressStr.c_str());

  pClient = BLEDevice::createClient();
  pClient->setClientCallbacks(new MyClientCallback());

  // Connect
  bool ok = pClient->connect(addr, targetAddressType);
  if (!ok) {
    Serial.println("[BLE] ‚ùå K·∫øt n·ªëi th·∫•t b·∫°i");
    return false;
  }

  Serial.println("[BLE] ‚úÖ K·∫øt n·ªëi th√†nh c√¥ng, ƒëang l·∫•y services...");
  delay(1000); // ƒê·ª£i services s·∫µn s√†ng

  // ƒê·ªçc pin
  BLERemoteService *pBatterySrv = pClient->getService(batteryServiceUUID);
  if (pBatterySrv) {
    pBatteryChar = pBatterySrv->getCharacteristic(batteryLevelCharUUID);
    if (pBatteryChar && pBatteryChar->canRead()) {
      std::string v = pBatteryChar->readValue();
      if (!v.empty()) {
        batteryLevel = (uint8_t)v[0];
        Serial.printf("üîã Battery: %d%%\n", batteryLevel);
      }
    }
  }

  // ƒêƒÉng k√Ω notify nh·ªãp tim
  BLERemoteService *pHRSrv = pClient->getService(heartRateServiceUUID);
  if (pHRSrv) {
    pHeartRateChar = pHRSrv->getCharacteristic(heartRateMeasurementCharUUID);
    if (pHeartRateChar && pHeartRateChar->canNotify()) {
      pHeartRateChar->registerForNotify(heartRateNotifyCallback);
      Serial.println("[BLE] ‚úÖ ƒê√£ b·∫≠t Heart Rate Notify!");
    } else {
      Serial.println("[BLE] ‚ö†Ô∏è Characteristic kh√¥ng h·ªó tr·ª£ notify");
    }
  } else {
    Serial.println("[BLE] ‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y d·ªãch v·ª• Heart Rate!");
  }

  return true;
}

// =======================================
// Setup / Loop
// =======================================
void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("=== ESP32 BLE Heart Rate (Scan + Connect) ===");

  BLEDevice::init("ESP32_HeartClient");
  // BLEDevice::setPower(ESP_PWR_LVL_P7);

  scanDevices(5);
  delay(500);

  if (scanHeartRateDevice(10)) {
    delay(500); // ƒê·ª£i sau scan
    connectToDevice();
  }
}

void loop() {
  if (!connected) {
    static unsigned long last = 0;
    if (millis() - last > 15000) {
      last = millis();
      Serial.println("\n[BLE] Re-scan v√¨ m·∫•t k·∫øt n·ªëi...");
      if (scanHeartRateDevice(10)) {
        delay(500);
        connectToDevice();
      }
    }
  } else {
    Serial.printf("‚ù§Ô∏è BPM: %d | üîã %d%%\n", heartRateValue, batteryLevel);
  }
  delay(3000);
}